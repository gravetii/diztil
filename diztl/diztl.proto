syntax = "proto3";

service DiztlService {
    rpc Search (SearchReq) returns (SearchResp) {
    }
    rpc Upload (DownloadReq) returns (stream FileChunk) {
    }
    rpc Ping (PingReq) returns (PingResp) {
    }
}

service TrackerService {
    rpc Register (RegisterReq) returns (RegisterResp) {
    }
    rpc Search (SearchReq) returns (stream SearchResp) {
    }
    rpc disconnect (DisconnectReq) returns (DisconnectResp) {
    }
}

message Node {
    // The IP address of the node.
    string ip = 1;
    // The unique assigned to the node by the tracker.
    string id = 2;
}

message FileMetadata {
    // Path to the file.
    string path = 1;
    // ID of the file in the local namespace.
    int32 id = 2;
    // Size of the file in bytes.
    int64 size = 3;
    // Number of chunks constituting this file based on the buffer size config.
    int32 chunks = 4;
    // Name of the file.
    string name = 5;
    // The hash data of the file.
    FileHash hash = 6;
}

message FileHash {
    // The checksum of the file.
    bytes checksum = 1;
    // The timestamp at which the file's checksum was calculated.
    int64 ts = 2;
}

message FileChunk {
    // The metadata of the parent file typically sent in the first file chunk.
    FileMetadata metadata = 1;
    // The data of this file chunk.
    bytes data = 2;
    // The chunk number of this chunk of data starting from one.
    int32 chunk = 3;
}

message RegisterReq {
    Node node = 1;
}

message RegisterResp {
    Node node = 1;
}

message SearchReq {
    // The filename to search for.
    string filename = 1;
    // The origin node of this request.
    Node source = 2;
}

message SearchResp {
    // The list of files gathered from all the nodes in the network that might
    // be of interest to the calling node.
    repeated FileMetadata files = 1;
    // The node to which the files belong.
    Node node = 2;
}

message DownloadContract {
    // The file chunk size which the receiver node specifies while sending a
    // download request to the sender node. The sender node has to honour this value
    // and create chunks of this size when it uploads the fileÂ to the receiver to
    // not overwhelm it when it processes the downloaded chunks.
    int32 chunkSize = 1;
}

message DownloadReq {
    // The node from which the requester node wants to download a file of interest.
    Node source = 1;
    // The metadata of the file to be downloaded.
    FileMetadata metadata = 2;
    // The download contract that the receiver node wants to let the sender node know.
    DownloadContract contract = 3;
}

message DisconnectReq {
    Node node = 1;
}

message DisconnectResp {
    string message = 1;
}

message PingReq {
    Node source = 1;
    Node dest = 2;
}

message PingResp {
    string message = 1;
}